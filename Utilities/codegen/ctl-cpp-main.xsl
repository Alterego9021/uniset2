<?xml version='1.0' encoding="koi8-r" ?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version='1.0'
		             xmlns:date="http://exslt.org/dates-and-times">

<xsl:import href="ctl-cpp-common.xsl"/>
<xsl:output method="text" indent="yes" encoding="koi8-r"/>

<xsl:variable name="CLASSNAME">
	<xsl:call-template name="settings"><xsl:with-param name="varname" select="'class-name'"/></xsl:call-template>
</xsl:variable>
<xsl:variable name="BASECLASS">
	<xsl:call-template name="settings"><xsl:with-param name="varname" select="'base-class'"/></xsl:call-template>
</xsl:variable>
<xsl:variable name="OID">
	<xsl:call-template name="settings"><xsl:with-param name="varname" select="'ID'"/></xsl:call-template>
</xsl:variable>

<!-- Генерирование main для UniSet_FSM -->
<xsl:template match="/">

// --------------------------------------------------------------------------
/*
 DO NOT EDIT THIS FILE. IT IS AUTOGENERATED FILE.
 ALL YOUR CHANGES WILL BE LOST.
 
 НЕ РЕДАКТИРУЙТЕ ЭТОТ ФАЙЛ. ЭТОТ ФАЙЛ СОЗДАН АВТОМАТИЧЕСКИ.
 ВСЕ ВАШИ ИЗМЕНЕНИЯ БУДУТ ПОТЕРЯНЫ.
*/ 
// --------------------------------------------------------------------------
// generate timestamp: <xsl:value-of select="date:date()"/>
// -----------------------------------------------------------------------------
#include &lt;sstream&gt;
#include <xsl:call-template name="preinclude"/>Configuration.h<xsl:call-template name="postinclude"/>
#include <xsl:call-template name="preinclude"/>ObjectsActivator.h<xsl:call-template name="postinclude"/>
#include <xsl:call-template name="preinclude"/>Debug.h<xsl:call-template name="postinclude"/>
#include "<xsl:value-of select="$CLASSNAME"/>.h"
// -----------------------------------------------------------------------------
using namespace std;
using namespace UniSetTypes;
// -----------------------------------------------------------------------------
int main( int argc, const char** argv )
{
	if( argc>1 &amp;&amp; strcmp(argv[1],"--help")==0 )
	{
		cout &lt;&lt; "--name name		- ID процесса. По умолчанию <xsl:value-of select="$CLASSNAME"/>." &lt;&lt; endl;
		cout &lt;&lt; "--confile fname	- Конф. файл. по умолчанию configure.xml" &lt;&lt; endl;
		cout &lt;&lt; "--logfile fname	- выводить логи в файл fname. По умолчанию <xsl:value-of select="$CLASSNAME"/>.log"  &lt;&lt; endl;
		return 0;
	}

	try
	{
		string confile = UniSetTypes::getArgParam( "--confile", argc, argv, "configure.xml" );
		conf = new Configuration(argc, argv, confile);

		string logfilename = conf->getArgParam("--logfile","<xsl:value-of select="$CLASSNAME"/>.log");

		string logname( conf->getLogDir() + logfilename );
		unideb.logFile( logname.c_str() );	

		<xsl:if test="not(normalize-space(//@OID))=''">
				<xsl:value-of select="$CLASSNAME"/> obj;
		</xsl:if>
		<xsl:if test="normalize-space(//@OID)=''">
		// определяем ID объекта
		ObjectId ID(DefaultObjectId);
		string name = conf->getArgParam("--name","<xsl:value-of select="$CLASSNAME"/>");
		if( !name.empty() )
		{
			ID = conf->getObjectID(name);	
			if( ID == UniSetTypes::DefaultObjectId )
			{
				cerr &lt;&lt; "(main): идентификатор '" &lt;&lt; name 
					&lt;&lt; "' не найден в конф. файле!"
					&lt;&lt; " в секции " &lt;&lt; conf->getObjectsSection() &lt;&lt; endl;
				return 0;
			}
		}
		<xsl:value-of select="$CLASSNAME"/> obj(ID);
		</xsl:if>
		
		ObjectsActivator act;
		act.addObject(static_cast&lt;class UniSetObject*&gt;(&amp;obj));

		SystemMessage sm(SystemMessage::StartUp); 
		act.broadcast( sm.transport_msg() );
		act.run(false);
		pause();	// пауза, чтобы дочерние потоки успели завершить работ
	}
	catch(Exception&amp; ex)
	{
		cerr &lt;&lt; "(main): " &lt;&lt; ex &lt;&lt; endl;
	}
	catch(...)
	{
		cerr &lt;&lt; "(main): catch ..." &lt;&lt; endl;
	}

	return 0;
}
</xsl:template>
</xsl:stylesheet>
