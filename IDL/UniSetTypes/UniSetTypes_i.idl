/* This file is part of the UniSet project
 * Copyright (c) 2002 Free Software Foundation, Inc.
 * Copyright (c) 2002 Pavel Vainerman <pv>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
// --------------------------------------------------------------------------
/*! \file
 *  \author Pavel Vainerman <pv>
 *  \date   $Date: 2009/01/23 23:56:54 $
 *  \version $Id: UniSetTypes_i.idl,v 1.9 2009/01/23 23:56:54 vpashka Exp $
*/
// --------------------------------------------------------------------------
#ifndef UniSetTypes_i_IDL_
#define UniSetTypes_i_IDL_
// --------------------------------------------------------------------------
//module UniSet
//{
	module UniSetTypes
	{
		typedef string<100> BaseObjectName; 
		typedef long ObjectId;			/*!< идентификатор объекта */
		typedef long MessageCode;		/*!< код сообщения */
		typedef long ThresholdId;		/*!< идентификатор порога */
		typedef long TimerId;			/*!< идентификатор таймера */
		typedef string<30> ObjectType;	/*!< тип объекта */
		
		
		typedef octet ByteOfMessage;		/*!< тип для одного байта сообщения */
		typedef ByteOfMessage RawDataOfTransportMessage[150];	/*!< данные в сообщении */
	
		/*!
		 * Структура пакета предназначенного для пересылки по сети
		 * \par
		 * Сообщения любого типа должны непосредственно перед отправкой приводится к этому типу.
		 * Все функции занимающиеся фактической пересылкой сообщений должны работать с этим типом сообщения.
		*/
		struct TransportMessage
		{
			RawDataOfTransportMessage data;
		};
		

		/*!
		 * Информация об узле
		*/		
		struct NodeInfo
		{
			ObjectId id;
			boolean connected;
			ObjectId infserver;
			ObjectId dbserver;
			string host;
			string port;
		};
		
		/*! информация об объекте */
		struct SimpleInfo
		{
			ObjectId id;
			string info;
		};
		
		typedef sequence<SimpleInfo> SimpleInfoSeq;
		

		/*! Информация о заказчике */
		struct ConsumerInfo
		{
			ObjectId id;	/*!< идентификатор заказчика */
			ObjectId node;	/*!< узел на котором он находится */
		};


		/*! Список идентификаторов */
		typedef sequence<ObjectId> IDSeq;


	};// end of module UniSetTypes


	module UniversalIO
	{
		/*!
		 * Типы входов/выходов
		*/
		enum IOTypes
		{
			DigitalInput,
			DigitalOutput,
			AnalogInput,
			AnalogOutput
		};
		
		 /*! Разрешенные команды для всех контроллеров ввода/вывода */
	     enum UIOCommand
		 { 
			 UIONotify,			/*!< заказать получение информации */
			 UIODontNotify,		/*!< отказаться от получения информации */
			 UIONotifyChange,	/*!< заказ информации, только после изменения (без первого уведомления о текущем состоянии) */
			 UIONotifyFirstNotNull /*!< заказ информации. Первое уведомление, только если датчик не "0" */
		 };
	
	};	// end of module UniversalIO 
	
//};	// end of module UniSet
// --------------------------------------------------------------------------------------------------------------
#endif // of UniSetTypes_i_IDL
