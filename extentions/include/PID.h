// $Id: PID.h,v 1.1 2008/12/14 21:57:50 vpashka Exp $
// -----------------------------------------------------------------------------
#ifndef PID_H_
#define PID_H_
// -----------------------------------------------------------------------------
#include <sstream>
#include <iomanip>
// -----------------------------------------------------------------------------
/*! ПИД
	Формулы выведены на основе разностных уравнений
	см. http://atm.h1.ru/root/theory/theory33.html

	Он даёт неплохой результат и опимальнее по расчётам
	(содержит только умножение, не переполняется 
		т.к. учитывает только два последних шага)
*/
class PID
{
	public:
		PID();
		~PID();

		/*! Выполнение очередного шага расчётов
			\param X - входное значение 
			\param Z - заданное значение 
			\param Ts - интервал расчёта данных, [сек] (интервал между шагами расчёта).
				Ts - должно быть больше нуля
		*/
		void step( double X, double Z, double Ts );
		
		/*!	рестарт регулятора... */
		void reset();

		/*! пересчёт констант */
		void recalc();

		double Y;	/*!< расчётное выходное значение */
		double Kc;	/*!< пропорциональный коэффициент */
		double Ti;	/*!< постоянная времени интеграла, [сек] */
		double Td;	/*!< постоянная времени дифференциала, [сек] */

		double vlim; 	/*!< максимальное(минимальное) разрешённое значение (для любого растущего во времени коэффициента)
							защита от переполнения
						 */

		double d0;
		double d1;
		double d2;
		double sub1;
		double sub2;
		double sub;
		double prevTs;

		friend std::ostream& operator<<(std::ostream& os, PID& p );
		
		friend std::ostream& operator<<(std::ostream& os, PID* p )
		{
			return os << (*p);
		}

	protected:
	private:
};

// -----------------------------------------------------------------------------
#endif // PID_H_
// -----------------------------------------------------------------------------
