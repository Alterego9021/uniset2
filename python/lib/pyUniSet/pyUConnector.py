# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyUConnector', [dirname(__file__)])
        except ImportError:
            import _pyUConnector
            return _pyUConnector
        if fp is not None:
            try:
                _mod = imp.load_module('_pyUConnector', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyUConnector = swig_import_helper()
    del swig_import_helper
else:
    import _pyUConnector
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

class Params:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Params, name)
    __repr__ = _swig_repr
    max = _pyUConnector.Params_max
    def __init__(self): 
        this = _pyUConnector.new_Params()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _pyUConnector.Params_add(self, *args)
    __swig_setmethods__["argc"] = _pyUConnector.Params_argc_set
    __swig_getmethods__["argc"] = _pyUConnector.Params_argc_get
    __swig_setmethods__["argv"] = _pyUConnector.Params_argv_set
    __swig_getmethods__["argv"] = _pyUConnector.Params_argv_get
    __swig_getmethods__["inst"] = lambda x: _pyUConnector.Params_inst
    __swig_destroy__ = _pyUConnector.delete_Params
    __del__ = lambda self : None;
Params_swigregister = _pyUConnector.Params_swigregister
Params_swigregister(Params)
cvar = _pyUConnector.cvar
DefaultID = cvar.DefaultID

def Params_inst():
  return _pyUConnector.Params_inst()
Params_inst = _pyUConnector.Params_inst

class UConnector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UConnector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UConnector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyUConnector.new_UConnector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyUConnector.delete_UConnector
    __del__ = lambda self : None;
    def getUIType(self): return _pyUConnector.UConnector_getUIType(self)
    def getConfFileName(self): return _pyUConnector.UConnector_getConfFileName(self)
    def getValue(self, *args): return _pyUConnector.UConnector_getValue(self, *args)
    def setValue(self, *args): return _pyUConnector.UConnector_setValue(self, *args)
    def getSensorID(self, *args): return _pyUConnector.UConnector_getSensorID(self, *args)
    def getNodeID(self, *args): return _pyUConnector.UConnector_getNodeID(self, *args)
    def getShortName(self, *args): return _pyUConnector.UConnector_getShortName(self, *args)
    def getName(self, *args): return _pyUConnector.UConnector_getName(self, *args)
    def getTextName(self, *args): return _pyUConnector.UConnector_getTextName(self, *args)
UConnector_swigregister = _pyUConnector.UConnector_swigregister
UConnector_swigregister(UConnector)

# This file is compatible with both classic and new-style classes.


